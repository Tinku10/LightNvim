-- uses tailwindcss intellisense

-- local lspconfig = require'lspconfig'
-- local configs = require'lspconfig/configs'
-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- capabilities.textDocument.completion.completionItem.snippetSupport = true

-- Check if it's already defined for when reloading this file.
-- if not lspconfig.tailwindcss then
--   configs.tailwindcss = {
--     default_config = {
--       -- -- cmd = { "node", vim.fn.stdpath('data') .. "/lspinstall/tailwindcss/tailwindcss-intellisense/extension/dist/server/index.js", "--stdio" };
--       -- filetypes = {'html', 'css', 'javascript', 'javascriptreact', 'typescript', 'typescriptreact', 'vue'};
--       -- root_dir = function(fname)
--       --   return lspconfig.util.find_git_ancestor(fname) or vim.loop.os_homedir()
--       -- end;
--       -- settings = {};
--       filetypes = { "aspnetcorerazor", "astro", "astro-markdown", "blade", "django-html", "edge", "eelixir", "ejs", "erb", "eruby", "gohtml", "haml", "handlebars", "hbs", "html", "html-eex", "jade", "leaf", "liquid", "markdown", "mdx", "mustache", "njk", "nunjucks", "php", "razor", "slim", "twig", "css", "less", "postcss", "sass", "scss", "stylus", "sugarss", "javascript", "javascriptreact", "reason", "rescript", "typescript", "typescriptreact", "vue", "svelte" },
--       init_options = {
--         userLanguages = {
--           eelixir = "html-eex",
--           eruby = "erb"
--         }
--       },
--       on_new_config = function(new_config)
--           if not new_config.settings then
--             new_config.settings = {}
--           end
--           if not new_config.settings.editor then
--             new_config.settings.editor = {}
--           end
--           if not new_config.settings.editor.tabSize then
--             -- set tab size for hover
--             new_config.settings.editor.tabSize = vim.lsp.util.get_effective_tabstop()
--           end
--         end,
--       root_dir = require('lspconfig/util').root_pattern('tailwind.config.js', 'tailwind.config.ts', 'postcss.config.js', 'postcss.config.ts', 'package.json', 'node_modules', '.git'),
--       settings = {
--         tailwindCSS = {
--           lint = {
--             cssConflict = "warning",
--             invalidApply = "error",
--             invalidConfigPath = "error",
--             invalidScreen = "error",
--             invalidTailwindDirective = "error",
--             invalidVariant = "error",
--             recommendedVariantOrder = "warning"
--           },
--           validate = true
--         }
--       }
--     }
--   }
-- end

require"lspconfig".tailwindcss.setup {
  -- cmd = { "tailwindcss-language-server", "--stdio" },
  -- filetypes = {'html', 'css', 'javascript', 'javascriptreact', 'typescript', 'typescriptreact', 'vue'},
  -- root_dir = require('lspconfig/util').root_pattern("package.json", "tsconfig.json", "jsconfig.json", ".git"),
  -- handlers = {
  --   ["tailwindcss/getConfiguration"] = function(_, _, params, _, bufnr, _)
  --     -- tailwindcss lang server waits for this repsonse before providing hover
  --     vim.lsp.buf_notify(bufnr, "tailwindcss/getConfigurationResponse", {_id = params._id})
  --   end
  -- },
  -- settings = {
  --   tailwindCSS = {
  --     experimental = {
  --       classRegex = {
  --         "tw`([^`]*)", -- tw`...`
  --         "tw=\"([^\"]*)", -- <div tw="..." />
  --         "tw={\"([^\"}]*)", -- <div tw={"..."} />
  --         "tw\\.\\w+`([^`]*)", -- tw.xxx`...`
  --         "tw\\(.*?\\)`([^`]*)"
  --       }
  --     }
  --   }
  -- },
  on_attach=require('lsp/common').on_attach,
  -- capabilities = capabilities
}
